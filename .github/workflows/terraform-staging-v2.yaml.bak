name: terraform-staging-v2
on:
  push:
    branches:
      - main
      - staging
    # tags:
    #   - "infra-staging-v**"
    paths:
        # - infra/staging/**
        - .github/workflows/terraform-staging-v2.yaml

  workflow_dispatch:
    inputs:
      apply:
        description: 'Run terraform apply?'
        required: false
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'


# ToDo: Matrix conditional scenarios for each environment.

env:
  # Variables for global usage
  current-branch: staging
  entorno: staging # Entorno para consul
  TF_VAR_environment: staging # Ambiente de ejecucion
  environment: staging # Ambiente de ejecuci√≥n
  consul_base_path: platform-infra-backend/${{ github.repository }}/resources
  repo_name: ${{ github.repository }}
  CONSUL_HTTP_ADDR: consul.tools.cencox.xyz
  CONSUL_DATACENTER: dc1
  CONSUL_HTTP_SSL: true
  CONSUL_ADDR: consul.tools.cencox.xyz
  CONSUL_ADDRESS: consul.tools.cencox.xyz
  TF_VAR_project_id: cencosudx
  TF_VAR_region: us-east1
  TF_VAR_zone: us-east1-c
  TF_VAR_dns_zone: cencox-xyz
  TF_VAR_datacenter: 'dc1'
  TF_VAR_consul_address: 'consul.tools.cencox.xyz'
  TF_VAR_consul_datacenter: dc1
  TF_VAR_consul_tfstate_path: platform-infra-backend/${{ github.repository }}/resources/staging/terraform.tfstate
  TF_VAR_consul_base_path: platform-infra-backend/${{ github.repository }}/resources
  TF_VAR_kafka_cluster_id: '${{ secrets.KAFKA_STAGING_EASTUS1_01_CLUSTER_ID }}'
  TF_VAR_kafka_rest_endpoint: '${{ secrets.KAFKA_STAGING_EASTUS1_01_REST_ENDPOINT }}'
  TF_VAR_kafka_api_key: '${{ secrets.KAFKA_STAGING_API_KEY }}'
  TF_VAR_kafka_api_secret: '${{ secrets.KAFKA_STAGING_API_SECRET }}'
  kafka_cluster_id: '${{ secrets.KAFKA_STAGING_EASTUS1_01_CLUSTER_ID }}'
  kafka_rest_endpoint: '${{ secrets.KAFKA_STAGING_EASTUS1_01_REST_ENDPOINT }}'
  kafka_api_key: '${{ secrets.KAFKA_STAGING_API_KEY }}'
  kafka_api_secret: '${{ secrets.KAFKA_STAGING_API_SECRET }}'
  TF_VAR_path_prefix:  platform-infra-backend/${{ github.repository }}/resources/staging
  TF_VAR_terraform_service_account_email: "terraform-cencosudx-tools@cencosudx.iam.gserviceaccount.com"


  TF_MODULES_COMMON_DEPLOY_KEY: ${{ secrets.TF_MODULES_COMMON_DEPLOY_KEY }}

jobs:
  terraform-staging-plan:
    runs-on: ubuntu-latest
    environment: staging

    permissions:
      contents: write
      id-token: write

    defaults:
      run:
        # shell: bash
        working-directory: examples/dlp_api_example

    steps:
      - uses: actions/checkout@v3
        name: get the latest code
        with:
          fetch-depth: 3
        id: checkout

      - name: Import Secrets from vault
        uses: hashicorp/vault-action@v2.4.3
        with:
          url: https://vault.cencosudx.xyz
          method: github
          path: github/cencosudx
          role: ${{ secrets.VAULT_ROLE }}
          githubToken: ${{ secrets.CENCO_GITHUB_AUTH_TOKEN }} # ${{ secrets.TF_API_TOKEN }}
          token: ${{ secrets.VAULT_TOKEN }}
          # caCertificate: ${{ secrets.VAULT_CA_CERT }}
          exportToken: true
          secrets: cl/consul/creds/ad-role token | CONSUL_HTTP_TOKEN ;
        continue-on-error: false
        id: import-secrets


      # We need this action only if we our own terraform modules within CencosudX,
      # or we have to authenticate against our repositories.

      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.TF_MODULES_COMMON_DEPLOY_KEY }} # Base64 Private SSH Key
        id: ssh-agent

      # Authentication with Google, exported to all steps
      - name: 'auth google'
        id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.TERRAFORM_GCP_CREDENTIALS }}' # Base64 JSON encoded service account with according poermissions.

      - name: setup tf
        id: setup_terraform
        uses: hashicorp/setup-terraform@v2
        # with:
        #   terraform_version: 1.0.4


      # THis step ios optional and is safe to fail, you can use to check the format of your files.
      # - name: Terraform fmt
      #   id: fmt
      #   run: terraform fmt -check
      #   continue-on-error: true

      - name: Terraform Init
        id: init
        # continue-on-error: false
        env:
          TF_LOG: INFO
        run: terraform init -input=false -upgrade=true -get=true -backend=true 

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -out="staging.tfplan"
        # continue-on-error: false

      # Now, only when we tag a commit, starting with "infra-v**", the apply command is triggered.
      - name: terraform-apply-staging
        id: apply
        # if: startsWith(github.ref, 'refs/tags/infra')
        env:
          APPLY: ${{ github.event.inputs.apply }}
        if: env.APPLY == 'true'
        run: terraform apply -auto-approve "staging.tfplan"
