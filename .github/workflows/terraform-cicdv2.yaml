name: terraform-cluster-oci
on:
  push:
    branches:
      - main
    # - oci
    # tags:
    #   - "infra-oci-v**"
    paths:
    - clusters/oci/**
    - .github/workflows/terraform-cicdv2.yaml

  workflow_dispatch:
    inputs:
      apply:
        description: 'Run terraform apply?'
        required: false
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'
      destroy:
        description: 'Run terraform destroy?'
        required: false
        type: choice
        default: 'false'
        options:
          - 'false'
          - 'false'
          - 'false'
          - 'false'
          - 'true'
      k3sup:
        description: 'Install k3sup?'
        required: false
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'



# ToDo: Matrix conditional scenarios for each environment.

env:
  # Variables for global usage
  # environment: oci # Ambiente de ejecuciÃ³n
  # TF_VAR_environment: oci # Ambiente de ejecucion exclusivo para Terraform
  TF_VAR_compartment_id: ${{ secrets.OCI_COMPARTMENT_OCID }}
  TF_VAR_user_ocid: ${{ secrets.OCI_USER_OCID }}
  TF_VAR_fingerprint: ${{ secrets.OCI_FINGERPRINT }}
  TF_VAR_private_key_path: ${{ github.workspace }}/clusters/oci/oci_private_key.pem
  TF_VAR_ssh_authorized_keys: ${{ secrets.OCI_SSH_PUBLIC_KEY }}
  TF_VAR_region: ${{ secrets.OCI_REGION }}
  TF_VAR_tenancy_ocid: ${{ secrets.OCI_TENANCY_OCID }}
  TF_VAR_private_key: ${{ secrets.OCI_PRIVATE_KEY }}
  TF_VAR_cluster_token: ${{ secrets.OCI_CLUSTER_TOKEN }}
  TF_VAR_ssh_public_key: '${{ secrets.OCI_SSH_PUBLIC_KEY }}'
  # TF_VAR_ssh_private_key_path: ${{ github.workspace }}/clusters/oci/oci_private_key.pem
  TF_VAR_ssh_private_key: '${{ secrets.OCI_SSH_PRIVATE_KEY }}'
  TF_VAR_image_ocid: ${{ secrets.OCI_IMAGE_OCID }}
  TF_VAR_current_user_ocid: ${{ secrets.OCI_USER_OCID }}
  TF_VAR_compartment_ocid: ${{ secrets.OCI_COMPARTMENT_OCID }}


jobs:
  terraform-oci-plan:
    runs-on: ubuntu-latest
    environment: oci
    outputs:
      ip_0: ${{ steps.apply.outputs.apply }}

    permissions:
      contents: write
      id-token: write
      pull-requests: write


    # defaults:
    #   run:
    #     # shell: bash
    #     working-directory: clusters/oci

    steps:
      - uses: actions/checkout@v3
        name: get the latest code
        with:
          fetch-depth: 0
          ref: main
          persist-credentials: true

        id: checkout

      - name: dump files
        id: dump_files
        run: |
          echo "${{ secrets.OCI_PRIVATE_KEY }}" | base64 -d > ${{ github.workspace }}/clusters/oci/oci_private_key.pem

      - name: setup tf
        id: setup_terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
        #   terraform_version:


      # THis step ios optional and is safe to fail, you can use to check the format of your files.
      # - name: Terraform fmt
      #   id: fmt
      #   run: terraform fmt -check
      #   continue-on-error: true

      - name: Terraform Init
        id: init
        # continue-on-error: false
        env:
          TF_LOG: INFO
        run: terraform -chdir=./clusters/oci init

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=./clusters/oci validate -no-color
        continue-on-error: true

      - name: Terraform Plan Destroy
        id: plan-destroy
        env:
          TF_LOG: INFO
          DESTROY: ${{ github.event.inputs.destroy }}
        if: env.DESTROY == 'true' && github.actor == 'ngeorger'
        # Refresh the state before running the plan, to avoid errors.
        run: |
            terraform -chdir=./clusters/oci refresh -input=false && terraform -chdir=./clusters/oci plan -destroy -input=false -out=tfplan || \
              terraform -chdir=./clusters/oci plan -destroy -input=false -out=tfplan
        # continue-on-error: false        

      - name: Terraform Plan Create
        id: plan
        env:
          TF_LOG: INFO
          DESTROY: ${{ github.event.inputs.destroy }}
        # Refresh the state before running the plan, to avoid errors.
        if: env.DESTROY != 'true'
        run: |
            terraform -chdir=./clusters/oci refresh -input=false && terraform -chdir=./clusters/oci plan -input=false -out=tfplan || \
              terraform -chdir=./clusters/oci plan -input=false -out=tfplan
        # continue-on-error: false

      # Now, only when we tag a commit, starting with "infra-v**", the apply command is triggered.
      - name: terraform-apply
        id: apply
        # if: startsWith(github.ref, 'refs/tags/infra')
        env:
          APPLY: ${{ github.event.inputs.apply }}
          DESTROY: ${{ github.event.inputs.destroy }}

        # execute this step only if  environment variable DESTROY = true, or an env variable APPLY = true, and the actor is ngeorger.
        if: env.DESTROY == 'true' && github.actor == 'ngeorger' || env.APPLY == 'true' && github.actor == 'ngeorger'
        run: |
          terraform -chdir=./clusters/oci apply -auto-approve tfplan
          echo IP_0=$(terraform -chdir=./clusters/oci output ip_public_0) >> $GITHUB_OUTPUTS
        # continue-on-error: false    
          

# Save tfstate to github
      - name: Save tfstate to github
        id: save_tfstate
        if: steps.apply.outcome == 'success' || steps.plan-destroy.outcome == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: terraform.tfstate
          path: clusters/oci/terraform.tfstate

  install-k3sup:
    # needs: terraform-oci-plan
    if: github.event.inputs.k3sup == 'true' && github.actor == 'ngeorger'
    # if: ${{ needs.terraform-oci-plan.outputs.ip_0 != '' }} 
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write
      pull-requests: write
    
  
    steps:
    #   - uses: actions/checkout@v3
    #     name: get the latest code
    #     with:
    #       fetch-depth: 0
    #       ref: main
    #       persist-credentials: true
    #     id: checkout

      - name: dump files
        id: dump_files2
        continue-on-error: true
        run: |
          mkdir -pv ${{ github.workspace }}/.ssh
          echo "${{ secrets.OCI_SSH_PRIVATE_KEY }}" > ${{ github.workspace }}/.ssh/id_rsa
          chmod 600 ${{ github.workspace }}/.ssh/id_rsa

      - name: Install k3sup
        id: install_k3sup
        continue-on-error: true
        run: |
          curl -sLS https://get.k3sup.dev | sh
          sudo mv k3sup /usr/local/bin/
          k3sup || true
      
      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.OCI_SSH_PRIVATE_KEY }}
      
      - name: execute k3sup
        env:
          IP_ADDRESS: ${{ secrets.OCI_IP_ADDRESS }}
        run: |
          k3sup install --ip ${{ env.IP_ADDRESS }}  --user ubuntu --ssh-key ${{ github.workspace }}/.ssh/id_rsa --local-path ${{ github.workspace }}/clusters/oci/kubeconfig.yaml --merge --context k3s-oci --cluster 
        continue-on-error: true

      - name: Save kubeconfig to github
        id: save_kubeconfig
        uses: actions/upload-artifact@v3
        with:
          name: kubeconfig.yaml
          path: clusters/oci/kubeconfig.yaml
        continue-on-error: true
