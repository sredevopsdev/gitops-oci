name: terraform-cluster-oci
on:
  push:
    branches:
      - main
    # - oci
    # tags:
    #   - "infra-oci-v**"
    paths:
    - clusters/oci/**
    - .github/workflows/terraform-cicdv2.yaml

  workflow_dispatch:
    inputs:
      apply:
        description: 'Run terraform apply?'
        required: false
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'


# ToDo: Matrix conditional scenarios for each environment.

env:
  # Variables for global usage
  TF_VAR_environment: oci # Ambiente de ejecucion exclusivo para Terraform
  environment: oci # Ambiente de ejecuciÃ³n
  TF_VAR_oci_tenancy_ocid: ${{ secrets.OCI_TENANCY_OCID }}
  TF_VAR_oci_user_ocid: ${{ secrets.OCI_USER_OCID }}
  TF_VAR_oci_fingerprint: ${{ secrets.OCI_FINGERPRINT }}
  TF_VAR_oci_private_key_path: ${{ github.workspace }}/private.key
  TF_VAR_oci_region: ${{ secrets.OCI_REGION }}
  TF_VAR_oci_compartment_ocid: ${{ secrets.OCI_COMPARTMENT_OCID }}
  TF_VAR_oci_ssh_public_key: ${{ secrets.OCI_SSH_PUBLIC_KEY }}
  TF_VAR_oci_ssh_private_key: ${{ secrets.OCI_SSH_PRIVATE_KEY }}
  TF_VAR_oci_ssh_private_key_path: ${{ github.workspace }}/private-ssh.key
  




jobs:
  terraform-oci-plan:
    runs-on: ubuntu-latest
    environment: oci

    permissions:
      contents: write
      id-token: write

    defaults:
      run:
        # shell: bash
        working-directory: clusters/oci

    steps:
      - uses: actions/checkout@v3
        name: get the latest code
        with:
          fetch-depth: 0
        id: checkout

      # We need this action only if we our own terraform modules within CencosudX,
      # or we have to authenticate against our repositories.

      # - uses: webfactory/ssh-agent@v0.7.0
      #   with:
      #     ssh-private-key: ${{ secrets.TF_MODULES_COMMON_DEPLOY_KEY }} # Base64 Private SSH Key
      #   id: ssh-agent

      # Authentication with Google, exported to all steps
      # - name: 'auth google'
      #   id: 'auth'
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     credentials_json: '${{ secrets.TERRAFORM_GCP_CREDENTIALS }}' # Base64 JSON encoded service account with according poermissions.
      # we stored env vars in a base64 encoded secret in github, so we can decode and dump it to $GITHUB_ENV, sso we use it in the next steps.


      - name: dump secrets into github env from secret encoded Base64
        id: dump
        env:
          FILE_ENVRC: '${{ secrets.FILE_ENVRC }}'
        run: |
            echo "$FILE_ENVRC" | base64 -d > .envrc
            cat .envrc >> $GITHUB_ENV


      - name: setup tf
        id: setup_terraform
        uses: hashicorp/setup-terraform@v2
        # with:
        #   terraform_version: 1.0.4


      # THis step ios optional and is safe to fail, you can use to check the format of your files.
      # - name: Terraform fmt
      #   id: fmt
      #   run: terraform fmt -check
      #   continue-on-error: true

      - name: Terraform Init
        id: init
        # continue-on-error: false
        env:
          TF_LOG: INFO
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -out="oci.tfplan"
        # continue-on-error: false

      # Now, only when we tag a commit, starting with "infra-v**", the apply command is triggered.
      - name: terraform-apply-oci
        id: apply
        # if: startsWith(github.ref, 'refs/tags/infra')
        env:
          APPLY: ${{ github.event.inputs.apply }}
        if: env.APPLY == 'true'
        run: terraform apply -auto-approve "oci.tfplan"

      - name: save plan + tfstate
        uses: actions/upload-artifact@v2
        if: always()
        continue-on-error: true
        with:
          name: terraform-oci-plan
          path: |
            clusters/oci/oci.tfplan
            clusters/oci/terraform.tfstate
            clusters/oci/terraform.tfstate.backup
